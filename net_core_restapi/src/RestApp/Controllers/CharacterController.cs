/*
 * Star Wars API
 *
 * This is a REST API for managing Star Wars characters
 *
 * OpenAPI spec version: 1.0.0
 * Contact: luk@mysl.tech
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using RestApp.Attributes;
using RestApp.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace RestApp.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class CharacterController : BaseController
    {
      

        /// <summary>
        /// adds an character item
        /// </summary>
        /// <remarks>Adds an item character to the system</remarks>
        /// <param name="characterModel">Inventory item to add</param>
        /// <response code="201">item created</response>
        /// <response code="400">invalid input, object invalid</response>
        /// <response code="409">an existing item already exists</response>
        [HttpPost]
        [Route("/mysltech/StarWarsApi/1.0.0/characters")]
        [ValidateModelState]
        [SwaggerOperation("AddCharacter")]
        public virtual IActionResult AddCharacter([FromBody]CharacterModelDataContract characterModel)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a character
        /// </summary>
        
        /// <param name="characterId">Character id to delete</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Character not found</response>
        [HttpDelete]
        [Route("/mysltech/StarWarsApi/1.0.0/characters/{characterId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCharacter")]
        public virtual IActionResult DeleteCharacter([FromRoute][Required]long? characterId)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// get list of characters
        /// </summary>
        /// <remarks>Returns all characters of Star Wars movie </remarks>
        /// <param name="searchString">pass an optional search string for looking up characters</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/mysltech/StarWarsApi/1.0.0/characters")]
        [ValidateModelState]
        [SwaggerOperation("GetListOfCharacters")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CharacterModelDataContract>), description: "search results matching criteria")]
        public virtual IActionResult GetListOfCharacters([FromQuery]string searchString, [FromQuery]int? skip, [FromQuery][Range(0, 50)]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CharacterModelDataContract>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            return new ObjectResult(null);
        }

        /// <summary>
        /// Update an existing character
        /// </summary>
        
        /// <param name="body">Character object that needs to be added first</param>
        /// <param name="characterId">Character id to delete</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Character not found</response>
        /// <response code="405">Validation exception</response>
        [HttpPut]
        [Route("/mysltech/StarWarsApi/1.0.0/characters/{characterId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateCharacter")]
        public virtual IActionResult UpdateCharacter([FromBody]CharacterModelDataContract body, [FromRoute][Required]long? characterId)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }
    }
}
